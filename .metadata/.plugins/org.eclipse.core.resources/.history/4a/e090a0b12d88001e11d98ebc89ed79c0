package com.example.SpringSecurity;


import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Properties;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class config 
{
	
	
	/*
	 * @Bean public UserDetailsService getUser() { // UserDetails user=
	 * User.withUsername("akshay").password("akshay123").roles("USER").build();
	 * 
	 * // return new InMemoryUserDetailsManager(user);
	 * 
	 * return new MyOwnAuthentication(); }
	 */
	
	/*
	 * @Bean public UserDetailsService getUser1() { UserDetails user=
	 * User.withUsername("akshay123").password("123").roles("USER").build();
	 * 
	 * return new InMemoryUserDetailsManager(user); }
	 */
	
	
	@Bean
	public SecurityFilterChain filters(HttpSecurity security) throws Exception 
	{
		
		
		security.authorizeHttpRequests()
		.anyRequest().authenticated()
		.and().oauth2Login();
		
		
		return security.build();
	}
	
	
	
	
	/*
	 * @Bean public ClientRegistrationRepository clientRegistrationRepository() {
	 * return new InMemoryClientRegistrationRepository(googleClientRegistration());
	 * }
	 * 
	 * private ClientRegistration googleClientRegistration() { return
	 * ClientRegistration.withRegistrationId("google")
	 * .clientId("spring.security.oauth2.client.registration.google.client-id")
	 * .clientSecret(
	 * "spring.security.oauth2.client.registration.google.client-secret")
	 * .redirectUriTemplate(
	 * "spring.security.oauth2.client.registration.google.redirect-uri-template")
	 * .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
	 * 
	 * .authorizationUri(
	 * "spring.security.oauth2.client.provider.google.authorization-uri")
	 * .tokenUri("spring.security.oauth2.client.provider.google.token-uri")
	 * .userInfoUri("spring.security.oauth2.client.provider.google.user-info-uri")
	 * .userNameAttributeName(
	 * "spring.security.oauth2.client.provider.google.user-name-attribute")
	 * .scope("spring.security.oauth2.client.registration.google.scope")
	 * 
	 * .build(); }
	 */

	 
	
	@Bean 
	public PasswordEncoder pass() 
	{
		return NoOpPasswordEncoder.getInstance();
	}
}

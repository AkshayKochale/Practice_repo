package com.example.SpringSecurity;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class config 
{
	
	
	@Bean
	public UserDetailsService getUser() 
	{
//			UserDetails user= User.withUsername("akshay").password("akshay123").roles("USER").build();
			
//			return new InMemoryUserDetailsManager(user);
			
			return new MyOwnAuthentication();
	}
	
	/*
	 * @Bean public UserDetailsService getUser1() { UserDetails user=
	 * User.withUsername("akshay123").password("123").roles("USER").build();
	 * 
	 * return new InMemoryUserDetailsManager(user); }
	 */
	
	
	@Bean
	public SecurityFilterChain filters(HttpSecurity security) throws Exception 
	{
		
		
		security.authorizeHttpRequests()
//		.antMatchers("/**").hasAnyRole("ADMIN","USER")
		.antMatchers("/**/admin/**").hasRole("ADMIN")
		.anyRequest().authenticated()
		.and().oauth2Login();
		
		
		return security.build();
	}
	
	
	 @Bean
	    public ClientRegistrationRepository clientRegistrationRepository() {
	        return new InMemoryClientRegistrationRepository();
	    }
	
	@Bean 
	public PasswordEncoder pass() 
	{
		return NoOpPasswordEncoder.getInstance();
	}
}
